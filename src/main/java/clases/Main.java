/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import java.io.*;

public class Main {

	public static void main(String[] args) throws IOException {

		ArrayList<Libro> catalogo = new ArrayList<Libro>();

		while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				alta(catalogo);
				break;
			case 2:
				mostrarLibro(catalogo);
				break;
			case 3:
				eliminarLibro(catalogo);
				break;
			case 4:
				busquedaLibro(catalogo);
				break;
			case 5:
				ordenaLibro(catalogo);
				break;
			case 6:
				guardarFichero(catalogo);
				break;
			case 7:
				leerFichero(catalogo);
				break;
			case 8:
				vaciarCatalogo(catalogo);
				break;
			default:
				break;
			}
		}
	}

	private static int menu() {
		int opcion = 0;

		do {
			System.out.println("Opciones:");
			System.out.println("1. Alta de Libro");
			System.out.println("2. Lista de Libros");
			System.out.println("3. Baja de Libros");
			System.out.println("4. Busqueda de Libros");
			System.out.println("5. Ordenacion de Libros");
			System.out.println("6. Guardar catalogo en fichero");
			System.out.println("7. Cargar catalogo en fichero");
			System.out.println("8. Vaciar catalogo");
			System.out.println("Introduce la opcion:");

			opcion = leerOpcion(8);

		} while (opcion <= 0);

		return opcion;
	}

	private static int leerOpcion(int max) {
		int opcion = -1;
		try {
			Scanner teclado = new Scanner(System.in);
			opcion = teclado.nextInt();
			if (opcion > max)
				opcion = -1;

		} catch (InputMismatchException e) {
			System.out.println("Opcion incorrecta");
		}

		return opcion;
	}

	private static void alta(ArrayList<Libro> catalogo) {
		// Leer de la entrada
		String datosLibro = obtenerDatosLibro();
		// titulo:isbn:genero:autor:paginas
		// Procesar la entrada
		Libro libro = procesaEntrada(datosLibro);
		// Crear el libro con los datos de la entrada
		catalogo.add(libro);
		// Meter el libro en el catalogo
	}

	private static String obtenerDatosLibro() {
		String datos = null;

		boolean validado = false;
		while (!validado) {
			System.out.println("Introduce los datos de un libro.");
			System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
			System.out.println("El ISBN debe contener 13 digitos y empieza por 978 o 979");
			try {
				datos = leerCadena();
				if (true)// Supongo de momento que valida siempre
					validado = true;
			} catch (InputMismatchException e) {
				System.out.println("Datos de entrada no validos");
			}
		}

		return datos;
	}

	private static String leerCadena() {
		String opcion = null;
		Scanner teclado = new Scanner(System.in);
		opcion = teclado.nextLine();

		return opcion;
	}

	private static Libro procesaEntrada(String entrada) {
		Libro libro = null;

		String[] datos = entrada.split(":");

		String titulo = datos[0];
		String isbn = datos[1];
		validarISBN13(datos[1]);
		Genero genero = Genero.getGenero(datos[2]);
		validarGenero(datos[2]);
		String autor = datos[3];
		Integer paginas = Integer.parseInt(datos[4]);
		validarPaginas(datos[4]);

		libro = new Libro(titulo, isbn, genero, autor, paginas);

		return libro;
	}

	/**
	 * Valida si una cadena es un ISBN de 13 digitos
	 *
	 * @param ISBN String que contiene el valor a validar
	 * @return True = es un usuario de twitter
	 */
	public static void validarISBN13(String isbn) {

		if (isbn.matches("^(978|979)[0-9]{10}$") != true) {
			System.out.println("ISBN incorrecto");
		} else {
			isbn.matches("^(978|979)[0-9]{10}$");
			System.out.println("ISBN correcto");
		}

	}

	public static void validarGenero(String genero) {

		if (genero.matches("^(novela|NOVELA|poesia|POESIA|ficcion|FICCION)$") != true) {
			System.out.println("genero incorrecto");
		} else {
			genero.matches("^(novela|NOVELA|poesia|POESIA|ficcion|FICCION)$");
			System.out.println("genero correcto");
		}

	}

	public static void validarPaginas(String paginas) {

		if (paginas.matches("^[0-9]+$") != true) {
			System.out.println("paginas incorrectas");
		} else {
			paginas.matches("^[0-9]+$");
			System.out.println("paginas correctas");
		}

	}

	private static void mostrarLibro(ArrayList<Libro> catalogo) {

		for (int i = 0; i < catalogo.size(); i++) {
			Libro l = catalogo.get(i);

			System.out.println("Libro " + (i + 1));
			System.out.println(l.toString());
		}

		if (catalogo.size() == 0) {
			System.out.println("El catalogo se encuentra vacio");
		}

		// Metodo bucle 2 con size sin toString

//		for (int i = 0; i < catalogo.size(); i++) {
//			System.out.println("Libro " + (i + 1));
//			System.out.println("-------------");
//			System.out.println("Titulo: " + catalogo.get(i).getTitulo());
//			System.out.println("ISBN: " + catalogo.get(i).getIsbn());
//			System.out.println("Genero: " + catalogo.get(i).getGenero());
//			System.out.println("Autor: " + catalogo.get(i).getAutor());
//			System.out.println("Paginas: " + catalogo.get(i).getPaginas());
//			System.out.println();

	}

//		IT:9781231231234:novela:Stephen King:1300
//		La isla del tesoro:9781869345867:ficcion:Pedro:200
//		Platero y yo:9781276849034:poesia:Juan Ramon Jimenez:150
//		

	private static void eliminarLibro(ArrayList<Libro> catalogo) {

		System.out.println("Escribe el titulo del libro que desea eliminar");
		Scanner teclado = new Scanner(System.in);
		int elemento = teclado.nextInt();
		catalogo.remove(elemento);

	}

	private static void busquedaLibro(ArrayList<Libro> catalogo) {
		String elegir;
		String isbn = "";

//		
		Scanner teclado = new Scanner(System.in);
		System.out.println("Escribe el isbn del libro que desea buscar");
		isbn = teclado.next();

		Libro l = new Libro();
		l.setIsbn(isbn);

		int posicion = 0;
		posicion = catalogo.indexOf(l);
		if (posicion < 0) {
			System.out.println("El libro no esta agregado en el catalogo");
		} else {
			System.out.println("Libro encontrado");
			System.out.println(catalogo.get(posicion));
		}

	}

	private static void ordenaLibro(ArrayList<Libro> catalogo) {

		int elegir = 0;

		do {
			System.out.println("Elige una opcion para ordenar el catalogo:\n" + "1. Titulo \n2. Numero de Paginas");
			Scanner teclado = new Scanner(System.in);
			elegir = teclado.nextInt();

			if (elegir == 1) {
				Collections.sort(catalogo);
				System.out.println("Catalogo ordenado por titulo");
				System.out.println("Compruebelo en la seccion \"Lista de libros\"");
			} else {
				Collections.sort(catalogo, new Libro());
				System.out.println("Catalogo ordenado por numero de paginas");
				System.out.println("Compruebelo en la seccion \"Lista de libros\"");
			}
		} while (elegir < 1 && elegir > 2);

	}

	private static void guardarFichero(ArrayList<Libro> catalogo) throws IOException {

		Scanner teclado = new Scanner(System.in);
		String nombreFichero = "";

		System.out.println("Como se llama el fichero a guardar");
		nombreFichero = teclado.next();

		try {
			FileWriter escribeFichero = new FileWriter(nombreFichero);
			for (Libro l : catalogo) {
				escribeFichero.write(l.toStringFile());

			}
			System.out.println("El catagolo se ha guardado en el fichero " + nombreFichero);
			escribeFichero.close();
		} catch (IOException e) {
			System.out.println("Error en el fichero");
			e.printStackTrace();
		}

		/**
		 * el write solo lo lee a traves de strings, no se puede con arraylist. hay que
		 * crear toString para devolverme un libro en cada cadena. se debe crerar un
		 * bucle con for each for(Libro l :catalogo){ write(l._______()); }
		 */

	}

	private static void leerFichero(ArrayList<Libro> catalogo) {

		Libro libro = null;

		System.out.println("Como se llama el fichero que quieres leer");
		Scanner sc = new Scanner(System.in);
		String nombreFichero = sc.next();

		File fichero = new File(nombreFichero);
		Scanner teclado = null;

		try {

			System.out.println("comprobando fichero...");
			teclado = new Scanner(fichero);

			while (teclado.hasNextLine()) {

				String linea = teclado.nextLine();

				String[] datos = linea.split(",");
				String titulo = datos[0];
				String isbn = datos[1];
				Genero genero = Genero.getGenero(datos[2]);
				String autor = datos[3];
				Integer paginas = Integer.parseInt(datos[4]);

				libro = new Libro(titulo, isbn, genero, autor, paginas);
				catalogo.add(libro);

			}
			teclado.close();

		} catch (Exception ex) {
			System.out.println("Lo sentimos, el fichero no existe");
		} finally {
			// Cerramos el fichero tanto si la lectura ha sido correcta o no
			try {
				if (teclado != null)
					teclado.close();
			} catch (Exception ex2) {
				System.out.println("Lo sentimos, el fichero no existe");
			}
		}

	}

//	IT:9781231231234:novela:Stephen King:1300
//	La isla del tesoro:9781869345867:ficcion:Pedro:200
//	Platero y yo:9781276849034:poesia:Juan Ramon Jimenez:150
//	

	private static void vaciarCatalogo(ArrayList<Libro> catalogo) {
		catalogo.clear();
		System.out.println("Catalogo vacio");
	}

}
